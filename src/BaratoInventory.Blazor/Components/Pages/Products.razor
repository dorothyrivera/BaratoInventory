@page "/products"
@rendermode InteractiveServer
@inject ProductApiClient ProductApiClient
@inject IJSRuntime JSRuntime
@using BaratoInventory.Blazor.Services
@using BaratoInventory.Core.DTOs

<h3>Products</h3>

<div class="mb-3 d-flex justify-content-between align-items-center">
    <div class="input-group w-50">
        <input class="form-control" placeholder="Search..." @bind="searchTerm" />
        <button class="btn btn-secondary" @onclick="SearchProducts">Search</button>
        <button class="btn btn-outline-secondary" @onclick="ClearSearch">Clear</button>
    </div>
    <Button Color="ButtonColor.Primary" @onclick="ShowCreateModal">Add Product</Button>
</div>

@if (!string.IsNullOrEmpty(notificationMessage))
{
    <div class="alert @notificationClass alert-dismissible fade show" role="alert">
        @notificationMessage
        <button type="button" class="btn-close" @onclick="() => notificationMessage = null" aria-label="Close"></button>
    </div>
}

<table class="table table-striped table-hover">
    <thead class="table-light">
        <tr>
            <th></th>
            <th>
                <button class="btn btn-link text-decoration-none p-0" @onclick="() => SortBy(nameof(ProductDto.Name))">
                    Name
                    @if (sortColumn == nameof(ProductDto.Name))
                    {
                        <i class="bi @(sortAscending ? "bi-arrow-up" : "bi-arrow-down") ms-1"></i>
                    }
                </button>
            </th>
            <th>
                <button class="btn btn-link text-decoration-none p-0" @onclick="() => SortBy(nameof(ProductDto.Category))">
                    Category
                    @if (sortColumn == nameof(ProductDto.Category))
                    {
                        <i class="bi @(sortAscending ? "bi-arrow-up" : "bi-arrow-down") ms-1"></i>
                    }
                </button>
            </th>
            <th>
                <button class="btn btn-link text-decoration-none p-0" @onclick="() => SortBy(nameof(ProductDto.Price))">
                    Price
                    @if (sortColumn == nameof(ProductDto.Price))
                    {
                        <i class="bi @(sortAscending ? "bi-arrow-up" : "bi-arrow-down") ms-1"></i>
                    }
                </button>
            </th>
            <th>
                <button class="btn btn-link text-decoration-none p-0" @onclick="() => SortBy(nameof(ProductDto.Quantity))">
                    Quantity
                    @if (sortColumn == nameof(ProductDto.Quantity))
                    {
                        <i class="bi @(sortAscending ? "bi-arrow-up" : "bi-arrow-down") ms-1"></i>
                    }
                </button>
            </th>
        </tr>
    </thead>
    <tbody>
        @if (products is null)
        {
            <tr><td colspan="5">Loading...</td></tr>
        }
        else if (!products.Any())
        {
            <tr><td colspan="5">No products found.</td></tr>
        }
        else
        {
            @foreach (var p in products)
            {
                <tr>
                    <td class="text-center">
                        <div class="dropdown">
                            <button class="btn btn-primary btn-sm dropdown-toggle" type="button" id="actionDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                Actions
                            </button>
                            <ul class="dropdown-menu" aria-labelledby="actionDropdown">
                                <li><a class="dropdown-item" @onclick="() => ShowViewModal(p)">View</a></li>
                                <li><a class="dropdown-item" @onclick="() => ShowEditModal(p)">Edit</a></li>
                                <li><a class="dropdown-item text-danger" @onclick="() => ShowDeleteModal(p)">Delete</a></li>
                            </ul>
                        </div>
                    </td>
                    <td>@p.Name</td>
                    <td>@p.Category</td>
                    <td>@p.Price</td>
                    <td>@p.Quantity</td>
                </tr>
            }
        }
    </tbody>
</table>

<Modal @ref="productModal" Title="@modalTitle">
    <BodyTemplate>
        <EditForm Model="currentProduct" OnValidSubmit="SaveProduct">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-2">
                <label>Name *</label>
                <InputText class="form-control" @bind-Value="currentProduct.Name" readonly="@isViewMode" />
            </div>
            <div class="mb-2">
                <label>Category *</label>
                <InputText class="form-control" @bind-Value="currentProduct.Category" readonly="@isViewMode" />
            </div>
            <div class="mb-2">
                <label>Price</label>
                <InputNumber class="form-control" @bind-Value="currentProduct.Price" readonly="@isViewMode" min="0" />
            </div>
            <div class="mb-2">
                <label>Quantity</label>
                <InputNumber class="form-control" @bind-Value="currentProduct.Quantity" readonly="@isViewMode" min="0" />
            </div>
        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="HideModal">Close</Button>
        @if (!isViewMode)
        {
            <Button Color="ButtonColor.Primary" @onclick="SaveProduct" disabled="@(string.IsNullOrWhiteSpace(currentProduct.Name) || string.IsNullOrWhiteSpace(currentProduct.Category))">Save</Button>
        }
    </FooterTemplate>
</Modal>

<Modal @ref="deleteModal" Title="Confirm Delete">
    <BodyTemplate>
        <p>Are you sure you want to delete <strong>@productToDelete?.Name</strong>?</p>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="CancelDelete">Cancel</Button>
        <Button Color="ButtonColor.Danger" @onclick="ConfirmDelete">Delete</Button>
    </FooterTemplate>
</Modal>

@code {
    private Modal productModal;
    private Modal deleteModal;
    private List<ProductDto> products = new();
    private ProductDto currentProduct = new();
    private ProductDto productToDelete;
    private string sortColumn = nameof(ProductDto.Name);
    private string modalTitle = "Add Product";
    private string searchTerm = "";
    private string notificationClass = "";
    private string notificationMessage = "";
    private bool sortAscending = true;
    private bool isViewMode = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        try
        {
            var order = sortAscending ? "asc" : "desc";
            products = await ProductApiClient.GetAllAsync(searchTerm, sortColumn, order);
        }
        catch (Exception ex)
        {
            await ShowNotification("Error loading products: " + ex.Message, "alert-danger", 3000);
        }
    }

    private async Task SearchProducts()
    {
        await LoadProducts();
    }

    private async Task ClearSearch()
    {
        searchTerm = "";
        await LoadProducts();
    }

    private void ShowCreateModal()
    {
        currentProduct = new ProductDto();
        modalTitle = "Add Product";
        productModal.ShowAsync();
    }

    private void ShowViewModal(ProductDto p)
    {
        currentProduct = new ProductDto
        {
            Id = p.Id,
            Name = p.Name,
            Category = p.Category,
            Price = p.Price,
            Quantity = p.Quantity
        };
        modalTitle = "View Product";
        isViewMode = true;
        productModal.ShowAsync();
    }

    private void ShowEditModal(ProductDto p)
    {
        currentProduct = new ProductDto
        {
            Id = p.Id,
            Name = p.Name,
            Category = p.Category,
            Price = p.Price,
            Quantity = p.Quantity
        };
        modalTitle = "Edit Product";
        productModal.ShowAsync();
    }

    private async Task SaveProduct()
    {
        try
        {
            if (currentProduct.Id == 0)
            {
                await ProductApiClient.CreateAsync(currentProduct);
                await ShowNotification("Product added successfully.", "alert-success", 3000);
            }
            else
            {
                await ProductApiClient.UpdateAsync(currentProduct);
                await ShowNotification("Product updated successfully.", "alert-success", 3000);
            }
            await productModal.HideAsync();
            await LoadProducts();
        }
        catch (Exception ex)
        {
            await ShowNotification("Error saving product: " + ex.Message, "alert-danger", 3000);
        }
    }

    private void ShowDeleteModal(ProductDto p)
    {
        productToDelete = p;
        deleteModal.ShowAsync();
    }

    private async Task ConfirmDelete()
    {
        if (productToDelete != null)
        {
            try
            {
                await ProductApiClient.DeleteAsync(productToDelete.Id);
                await ShowNotification("Product deleted successfully.", "alert-success", 3000);
                await LoadProducts();
            }
            catch (Exception ex)
            {
                await ShowNotification("Error deleting product: " + ex.Message, "alert-danger", 3000);
            }
            finally
            {
                productToDelete = null;
                await deleteModal.HideAsync();
            }
        }
    }

    private async Task CancelDelete()
    {
        productToDelete = null;
        await deleteModal.HideAsync();
    }

    private async Task HideModal()
    {
        isViewMode = false;
        await productModal.HideAsync();
    }

    private async void SortBy(string column)
    {
        if (sortColumn == column)
            sortAscending = !sortAscending;
        else
        {
            sortColumn = column;
            sortAscending = true;
        }
        await LoadProducts();
    }

    private async Task ShowNotification(string message, string cssClass, int duration)
    {
        notificationMessage = message;
        notificationClass = cssClass;
        StateHasChanged();

        await Task.Delay(duration);
        notificationMessage = null;
        StateHasChanged();
    }
}
